package frc.robot.components;

import com.ctre.phoenix6.configs.CANcoderConfiguration;
import com.ctre.phoenix6.configs.CurrentLimitsConfigs;
import com.ctre.phoenix6.configs.Pigeon2Configuration;
import com.ctre.phoenix6.configs.Slot0Configs;
import com.ctre.phoenix6.configs.TalonFXConfiguration;
import com.ctre.phoenix6.mechanisms.swerve.LegacySwerveModule.ClosedLoopOutputType;
import com.ctre.phoenix6.mechanisms.swerve.LegacySwerveModuleConstants;
import com.ctre.phoenix6.mechanisms.swerve.LegacySwerveModuleConstants.SteerFeedbackType;
import com.ctre.phoenix6.mechanisms.swerve.LegacySwerveModuleConstantsFactory;
import com.ctre.phoenix6.swerve.SwerveModuleConstants;

import edu.wpi.first.math.util.Units;

/**
 * This class contains constants generated by Tuner X
 * <br></br>
 * Currently only used to help setup motors
  */
public class SetupConstants {
    
    // Both sets of gains need to be tuned to your individual robot.

    // The steer motor uses any SwerveModule.SteerRequestType control request with the
    // output type specified by SwerveModuleConstants.SteerMotorClosedLoopOutput
    static final Slot0Configs steerGains = new Slot0Configs()
        .withKP(10)
        .withKI(0)
        .withKD(0.2)
        .withKS(0.25)
        .withKV(0.5)
        .withKA(0.01);
    // When using closed-loop control, the drive motor uses the control
    // output type specified by SwerveModuleConstants.DriveMotorClosedLoopOutput
    static final Slot0Configs driveGains = new Slot0Configs()
        .withKP(3)//TODO mess with these for driving
        .withKI(0)
        .withKD(0)
        .withKS(0)
        .withKV(0)
        .withKA(0);

    // The closed-loop output type to use for the steer motors;
    // This affects the PID/FF gains for the steer motors
    static ClosedLoopOutputType steerClosedLoopOutput = ClosedLoopOutputType.Voltage;
    // The closed-loop output type to use for the drive motors;
    // This affects the PID/FF gains for the drive motors
    static ClosedLoopOutputType driveClosedLoopOutput = ClosedLoopOutputType.Voltage;

    // The stator current at which the wheels start to slip;
    // This needs to be tuned to your individual robot
    //TODO
    static double kSlipCurrentA = 150.0;

    // Initial configs for the drive and steer motors and the CANcoder; these cannot be null.
    // Some configs will be overwritten; check the `with*InitialConfigs()` API documentation.
    static TalonFXConfiguration driveInitialConfigs = new TalonFXConfiguration();
    static TalonFXConfiguration steerInitialConfigs = new TalonFXConfiguration()
        .withCurrentLimits(
            new CurrentLimitsConfigs()
                // Swerve azimuth does not require much torque output, so we can set a relatively low
                // stator current limit to help avoid brownouts without impacting performance.
                .withStatorCurrentLimit(60)
                .withStatorCurrentLimitEnable(true)
        );
    static CANcoderConfiguration cancoderInitialConfigs = new CANcoderConfiguration();

    // Theoretical free speed (m/s) at 12v applied output;
    // This needs to be tuned to your individual robot
    //TODO
    public static final double kSpeedAt12VoltsMps = 4.73;

    // Every 1 rotation of the azimuth results in kCoupleRatio drive motor turns;
    // This may need to be tuned to your individual robot
    static double kCoupleRatio = 3.5714285714285716;

    static double kDriveGearRatio = 6.746031746031747;
    static double kSteerGearRatio = 21.428571428571427;
    static double kWheelRadiusInches = 2;

    // private static final String kCANbusName = "";
    //private static final int kPigeonId = ;

    
    static LegacySwerveModuleConstantsFactory ConstantCreator
        = new LegacySwerveModuleConstantsFactory()
        .withDriveMotorGearRatio(kDriveGearRatio)
        .withSteerMotorGearRatio(kSteerGearRatio)
        .withWheelRadius(kWheelRadiusInches)
        .withSlipCurrent(kSlipCurrentA)
        .withSteerMotorGains(steerGains)
        .withDriveMotorGains(driveGains)
        .withSteerMotorClosedLoopOutput(steerClosedLoopOutput)
        .withDriveMotorClosedLoopOutput(driveClosedLoopOutput)
        .withSpeedAt12VoltsMps(kSpeedAt12VoltsMps)
        .withFeedbackSource(SteerFeedbackType.FusedCANcoder)
        .withCouplingGearRatio(kCoupleRatio)
        .withDriveMotorInitialConfigs(driveInitialConfigs)
        .withSteerMotorInitialConfigs(steerInitialConfigs)
        .withCANcoderInitialConfigs(cancoderInitialConfigs);
    
    static boolean kInvertLeftSide = false;
    static boolean kInvertRightSide = true;
    
    // Front Left
    static int kFrontLeftDriveMotorId = 10;
    static int kFrontLeftSteerMotorId = 11;
    static int kFrontLeftEncoderId = 1;
    static double kFrontLeftEncoderOffset = 0.180908203125;
    static boolean kFrontLeftSteerInvert = false;

    static double kFrontLeftXPosInches = 12.375;
    static double kFrontLeftYPosInches = 12.375;

    // Front Right
    static int kFrontRightDriveMotorId = 40;
    static int kFrontRightSteerMotorId = 41;
    static int kFrontRightEncoderId = 4;
    static double kFrontRightEncoderOffset = -0.03955078125;
    static boolean kFrontRightSteerInvert = false;

    static double kFrontRightXPosInches = 12.375;
    static double kFrontRightYPosInches = -12.375;

    // Back Left
    static int kBackLeftDriveMotorId = 20;
    static int kBackLeftSteerMotorId = 21;
    static int kBackLeftEncoderId = 2;
    static double kBackLeftEncoderOffset = -0.425537109375;
    static boolean kBackLeftSteerInvert = false;

    static double kBackLeftXPosInches = -12.375;
    static double kBackLeftYPosInches = 12.375;

    // Back Right
    static int kBackRightDriveMotorId = 30;
    static int kBackRightSteerMotorId = 31;
    static int kBackRightEncoderId = 3;
    static double kBackRightEncoderOffset = 0.01171875;
    static boolean kBackRightSteerInvert = false;

    static double kBackRightXPosInches = -12.375;
    static double kBackRightYPosInches = -12.375;
    
    
    
    static LegacySwerveModuleConstants FrontLeft = ConstantCreator.createModuleConstants(
            kFrontLeftSteerMotorId, 
            kFrontLeftDriveMotorId, 
            kFrontLeftEncoderId, 
            kFrontLeftEncoderOffset, 
            Units.inchesToMeters(kFrontLeftXPosInches), 
            Units.inchesToMeters(kFrontLeftYPosInches), 
            kInvertLeftSide)
            .withSteerMotorInverted(kFrontLeftSteerInvert);
            
    static LegacySwerveModuleConstants FrontRight = ConstantCreator.createModuleConstants(
            kFrontRightSteerMotorId, 
            kFrontRightDriveMotorId, 
            kFrontRightEncoderId, 
            kFrontRightEncoderOffset, 
            Units.inchesToMeters(kFrontRightXPosInches), 
            Units.inchesToMeters(kFrontRightYPosInches), 
            kInvertRightSide)
            .withSteerMotorInverted(kFrontRightSteerInvert);
            
    static LegacySwerveModuleConstants BackLeft = ConstantCreator.createModuleConstants(
            kBackLeftSteerMotorId, 
            kBackLeftDriveMotorId, 
            kBackLeftEncoderId, 
            kBackLeftEncoderOffset, 
            Units.inchesToMeters(kBackLeftXPosInches), 
            Units.inchesToMeters(kBackLeftYPosInches), 
            kInvertLeftSide)
            .withSteerMotorInverted(kBackLeftSteerInvert);
            
    static LegacySwerveModuleConstants BackRight = ConstantCreator.createModuleConstants(
            kBackRightSteerMotorId, 
            kBackRightDriveMotorId, 
            kBackRightEncoderId, 
            kBackRightEncoderOffset, 
            Units.inchesToMeters(kBackRightXPosInches), 
            Units.inchesToMeters(kBackRightYPosInches), 
            kInvertRightSide)
            .withSteerMotorInverted(kBackRightSteerInvert);
}
