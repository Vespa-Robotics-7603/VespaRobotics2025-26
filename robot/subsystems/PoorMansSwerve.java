package frc.robot.subsystems;

import com.ctre.phoenix6.BaseStatusSignal;
import com.ctre.phoenix6.mechanisms.swerve.SwerveDrivetrain;


public class PoorMansSwerve {
    /* 
     * NOTE: the SwerveRequest interface is what actualy drives the robot
     * the pheonix 6 SwerveModule houses the turn and steer, and encoder
     * SwerveModule.apply(...) is what turns the wheel and sets speeds
     * The ODOMETRY SUBCLASS is what updates the params for the swerce request
     * (the position and such parts at least)
     * 
     * For custom drive train, I will need custom odometry mainly
     * the provided drivetrain class really just sets everything up,
     * and provides a few helpful methods
     * 
     * Ok, the provided class does alot of fancy things I don't understand
     * But, thats fine I don't need to replicate all of it
     * ... but maybe I should use threads...
     * 
     */
    /**
     * Ok so
     * Pigeon -> yawGetter, angularVelocity
     * YG, AV -> allSignals (in odometry), yawDegrees
     * Ok, so YG and AV can't be generated by me it seems
     * I might be able to replace yawDegrees usage
     * but all signals is probably alot more complicated
     * Wait... Actually not that complicated
     * Allsignals is just used to update/refresh stuff at the same time
     * I can easily leave out the yaw and angular velocity
     * 
     * WAIT THE COMPENSATION IS SO SIMPLE!
     * I JUST NEED A FEW BITS OF INFO IF I WANT
     * TO COMPENSATE IN THE FIRST PLACE!
     * <br></br>
     * Reference this when replacing yawDegrees
     * {@link BaseStatusSignal#getLatencyCompensatedValue()}
     * <br></br>
     * In constructor, edit last values of
     * {@link SwerveDrivetrain#m_allSignals}
     * <br></br>
     * Otherwise, copy paste the class file *thumbs up emoji*
     */
    public static void main(String[] args) {
        // new SwerveDrivetrain(null);
    }
}
